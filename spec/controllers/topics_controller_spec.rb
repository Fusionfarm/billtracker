require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TopicsController do

  # This should return the minimal set of attributes required to create a valid
  # topic. As you add validations to topic, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { "name" => "Hunting" }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TopicsController. Be sure to keep this updated too.
  def valid_session
    {"warden.user.user.key" => session["warden.user.user.key"]}
  end

  context "user is logged in" do
    before(:each) do
      sign_in FactoryGirl.create(:user)
    end

    describe "GET index" do
      it "assigns all Topics as @topics" do
        topic = Topic.create! valid_attributes
        get :index, {}, valid_session
        assigns(:topics).should eq([topic])
      end

      it "should order by name" do
        topics = [
          FactoryGirl.create(:topic, name: 'A'),
          FactoryGirl.create(:topic, name: 'C'),
          FactoryGirl.create(:topic, name: 'B')
        ]
        get :index, {}, valid_session
        assigns(:topics).should eq([topics[0],topics[2],topics[1]])
      end
    end

    describe "GET new" do
      it "assigns a new topic as @topic" do
        get :new, {}, valid_session
        assigns(:topic).should be_a_new(Topic)
      end
    end

    describe "GET edit" do
      it "assigns the requested topic as @topic" do
        topic = Topic.create! valid_attributes
        get :edit, {:id => topic.to_param}, valid_session
        assigns(:topic).should eq(topic)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new topic" do
          expect {
            post :create, {:topic => valid_attributes}, valid_session
          }.to change(Topic, :count).by(1)
        end

        it "assigns a newly created topic as @topic" do
          post :create, {:topic => valid_attributes}, valid_session
          assigns(:topic).should be_a(Topic)
          assigns(:topic).should be_persisted
        end

        it "redirects to the created topic" do
          post :create, {:topic => valid_attributes}, valid_session
          response.should redirect_to(topics_url)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved topic as @topic" do
          # Trigger the behavior that occurs when invalid params are submitted
          Topic.any_instance.stub(:save).and_return(false)
          post :create, {:topic => { }}, valid_session
          assigns(:topic).should be_a_new(Topic)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Topic.any_instance.stub(:save).and_return(false)
          post :create, {:topic => { }}, valid_session
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested topic" do
          topic = Topic.create! valid_attributes
          # Assuming there are no other Topics in the database, this
          # specifies that the topic created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Topic.any_instance.should_receive(:update_attributes).with({ "name" => "MyString" })
          put :update, {:id => topic.to_param, :topic => { "name" => "MyString" }}, valid_session
        end

        it "assigns the requested topic as @topic" do
          topic = Topic.create! valid_attributes
          put :update, {:id => topic.to_param, :topic => valid_attributes}, valid_session
          assigns(:topic).should eq(topic)
        end

        it "redirects to the topic" do
          topic = Topic.create! valid_attributes
          put :update, {:id => topic.to_param, :topic => valid_attributes}, valid_session
          response.should redirect_to(topics_url)
        end
      end

      describe "with invalid params" do
        it "assigns the topic as @topic" do
          topic = Topic.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Topic.any_instance.stub(:save).and_return(false)
          put :update, {:id => topic.to_param, :topic => { }}, valid_session
          assigns(:topic).should eq(topic)
        end

        it "re-renders the 'edit' template" do
          topic = Topic.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Topic.any_instance.stub(:save).and_return(false)
          put :update, {:id => topic.to_param, :topic => { }}, valid_session
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested topic" do
        topic = Topic.create! valid_attributes
        expect {
          delete :destroy, {:id => topic.to_param}, valid_session
        }.to change(Topic, :count).by(-1)
      end

      it "redirects to the Topics list" do
        topic = Topic.create! valid_attributes
        delete :destroy, {:id => topic.to_param}, valid_session
        response.should redirect_to(topics_url)
      end
    end
  end

  context "user is logged out" do
    describe "GET index" do
      it "redirects to sign in page" do
        get :index, {}, valid_session
        response.should redirect_to(new_user_session_path)
      end
    end

    describe "GET show" do
      it "redirects to sign in page" do
        topic = Topic.create! valid_attributes
        get :show, {:id => topic.to_param}, valid_session
        response.should redirect_to(new_user_session_path)
      end
    end

    describe "GET new" do
      it "redirects to sign in page" do
        get :new, {}, valid_session
        response.should redirect_to(new_user_session_path)
      end
    end

    describe "GET edit" do
      it "redirects to sign in page" do
        topic = Topic.create! valid_attributes
        get :edit, {:id => topic.to_param}, valid_session
        response.should redirect_to(new_user_session_path)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "redirects to sign in page" do
          post :create, {:topic => valid_attributes}, valid_session
          response.should redirect_to(new_user_session_path)
        end
      end

      describe "with invalid params" do
        it "redirects to sign in page" do
          # Trigger the behavior that occurs when invalid params are submitted
          Topic.any_instance.stub(:save).and_return(false)
          post :create, {:topic => { }}, valid_session
          response.should redirect_to(new_user_session_path)
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "redirects to sign in page" do
          topic = Topic.create! valid_attributes
          # Assuming there are no other Topics in the database, this
          # specifies that the topic created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          put :update, {:id => topic.to_param, :topic => valid_attributes }, valid_session
          response.should redirect_to(new_user_session_path)
        end
      end

      describe "with invalid params" do
        it "redirects to sign in page" do
          topic = Topic.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          put :update, {:id => topic.to_param, :topic => { }}, valid_session
          response.should redirect_to(new_user_session_path)
        end
      end
    end

    describe "DELETE destroy" do
      it "redirects to sign in page" do
        topic = Topic.create! valid_attributes
        delete :destroy, {:id => topic.to_param}, valid_session
        response.should redirect_to(new_user_session_path)
      end
    end
  end

end
